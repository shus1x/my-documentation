var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  AttrsParser: () => AttrsParser
});
module.exports = __toCommonJS(src_exports);

// src/lib/attrs.ts
var _key, _pending, _isInsideQuotation, _didQuotationClosed, _currentKeyType, _selectors, _handlers;
var AttrsParser = class {
  constructor(value) {
    this.DELIMITER = "=";
    this.SEPARATOR = " ";
    this.QUOTATION = '"';
    /* allowed in keys / values chars */
    this.ALLOWED_CHARS = /[a-zA-Z0-9_\- {}.|/]/;
    /* allowed in all query chars */
    this.VALIDATION_CHARS = /[a-zA-Z0-9_\- {}.#="|/]/;
    this.state = {};
    __privateAdd(this, _key, "");
    __privateAdd(this, _pending, "");
    __privateAdd(this, _isInsideQuotation, false);
    __privateAdd(this, _didQuotationClosed, false);
    __privateAdd(this, _currentKeyType, void 0);
    __privateAdd(this, _selectors, {
      id: /#/,
      class: /\./,
      attr: /[a-zA-Z-_]/
    });
    __privateAdd(this, _handlers, Object.entries(__privateGet(this, _selectors)));
    if (value) {
      this.parse(value);
    }
  }
  parse(target) {
    const content = this.extract(target.trim());
    if (!content) {
      return {};
    }
    this.clear();
    this.state = {};
    for (const char of content) {
      this.next(char);
    }
    this.next(this.SEPARATOR);
    this.clear();
    return this.state;
  }
  apply(target) {
    const { attr: singleKeyAttrs = [], ...fullAttrs } = this.state;
    for (const [property, values] of Object.entries(fullAttrs)) {
      target.attrJoin(property, values.join(" "));
    }
    for (const attr of singleKeyAttrs) {
      target.attrJoin(attr, "true");
    }
  }
  extract(target) {
    if (!target.startsWith("{")) {
      return false;
    }
    let balance = 1;
    for (let i = 1; i < target.length; i++) {
      const char = target[i];
      if (char === "}") {
        balance--;
      }
      if (char === "{") {
        balance++;
      }
      if (balance === 0) {
        const contentInside = target.slice(1, i).trim();
        return contentInside;
      }
      if (balance < 0) {
        return false;
      }
      if (!this.VALIDATION_CHARS.test(char)) {
        return false;
      }
    }
    return false;
  }
  next(value) {
    if (!__privateGet(this, _currentKeyType)) {
      __privateSet(this, _currentKeyType, this.type(value));
      if (__privateGet(this, _currentKeyType) === "attr") {
        __privateSet(this, _pending, value);
      }
      return;
    }
    if (this.isSeparator(value)) {
      if (!__privateGet(this, _pending)) {
        if (!__privateGet(this, _isInsideQuotation)) {
          this.append(__privateGet(this, _key), " ");
          this.clear();
          return;
        }
      }
      if (!__privateGet(this, _key) && __privateGet(this, _pending)) {
        this.append();
        this.clear();
        return;
      }
      if (__privateGet(this, _isInsideQuotation) && !__privateGet(this, _didQuotationClosed)) {
        __privateSet(this, _pending, __privateGet(this, _pending) + value);
        return;
      }
      if (__privateGet(this, _isInsideQuotation) && __privateGet(this, _didQuotationClosed)) {
        this.append(__privateGet(this, _key), __privateGet(this, _pending));
      }
      if (!__privateGet(this, _isInsideQuotation) && !__privateGet(this, _didQuotationClosed)) {
        this.append(__privateGet(this, _key), __privateGet(this, _pending));
      }
      this.clear();
      return;
    }
    if (this.isAllowedChar(value)) {
      __privateSet(this, _pending, __privateGet(this, _pending) + value);
      return;
    }
    if (this.isQuotation(value)) {
      if (__privateGet(this, _isInsideQuotation)) {
        __privateSet(this, _didQuotationClosed, true);
      } else {
        __privateSet(this, _isInsideQuotation, true);
      }
    }
    if (this.isDelimiter(value)) {
      if (__privateGet(this, _key)) {
        __privateSet(this, _pending, __privateGet(this, _pending) + value);
        return;
      }
      __privateSet(this, _key, __privateGet(this, _pending));
      __privateSet(this, _pending, "");
    }
  }
  type(of) {
    var _a;
    return (_a = __privateGet(this, _handlers).find(([_, regex]) => regex.test(of))) == null ? void 0 : _a[0];
  }
  append(key = __privateGet(this, _currentKeyType), value = __privateGet(this, _pending)) {
    if (!key) {
      return;
    }
    if (!this.state[key]) {
      this.state[key] = [];
    }
    this.state[key].push(value);
  }
  clear() {
    __privateSet(this, _key, "");
    __privateSet(this, _pending, "");
    __privateSet(this, _isInsideQuotation, false);
    __privateSet(this, _didQuotationClosed, false);
    __privateSet(this, _currentKeyType, void 0);
  }
  isDelimiter(target) {
    return target === this.DELIMITER;
  }
  isSeparator(target) {
    return target === this.SEPARATOR;
  }
  isQuotation(target) {
    return target === this.QUOTATION;
  }
  isAllowedChar(target) {
    return this.ALLOWED_CHARS.test(target);
  }
};
_key = new WeakMap();
_pending = new WeakMap();
_isInsideQuotation = new WeakMap();
_didQuotationClosed = new WeakMap();
_currentKeyType = new WeakMap();
_selectors = new WeakMap();
_handlers = new WeakMap();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AttrsParser
});
