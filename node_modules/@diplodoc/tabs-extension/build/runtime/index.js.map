{
  "version": 3,
  "sources": ["../../src/common.ts", "../../src/runtime/utils.ts", "../../src/runtime/TabsController.ts", "../../src/runtime/index.ts"],
  "sourcesContent": ["import {type TabsController} from './runtime/TabsController';\n\nexport const TAB_RE = /`?{% list tabs .*?%}`?/;\nexport const TABS_CLASSNAME = 'yfm-tabs';\nexport const TAB_CLASSNAME = 'yfm-tab';\nexport const TAB_PANEL_CLASSNAME = 'yfm-tab-panel';\nexport const TABS_LIST_CLASSNAME = 'yfm-tab-list';\nexport const ACTIVE_CLASSNAME = 'active';\nexport const TAB_GROUP_CLASSNAME = 'yfm-tab-group';\nexport const TAB_ACTIVE_KEY = 'data-diplodoc-is-active';\nexport const GROUP_DATA_KEY = 'data-diplodoc-group';\nexport const TAB_DATA_KEY = 'data-diplodoc-key';\nexport const TAB_DATA_VARIANT = 'data-diplodoc-variant';\nexport const TAB_DATA_ID = 'data-diplodoc-id';\nexport const DEFAULT_TABS_GROUP_PREFIX = 'defaultTabsGroup-';\nexport const ACTIVE_TAB_TEXT = '{selected}';\nexport const TAB_FORCED_OPEN = 'data-diplodoc-forced';\n\nexport const TABS_DROPDOWN_CLASSNAME = 'yfm-tabs-dropdown';\nexport const TABS_DROPDOWN_MENU_CLASSNAME = 'yfm-tabs-dropdown-menu';\nexport const TABS_DROPDOWN_SELECT = 'yfm-tabs-dropdown-select';\n\nexport const TABS_ACCORDION_CLASSNAME = 'yfm-tabs-accordion';\nexport const TABS_ACCORDION_CLIENT_HEIGHT = 'data-yfm-tabs-accordion-client-heights';\n\nexport const TABS_RADIO_CLASSNAME = 'yfm-tabs-vertical';\nexport const VERTICAL_TAB_CLASSNAME = 'yfm-vertical-tab';\nexport const TAB_DATA_VERTICAL_TAB = 'data-diplodoc-vertical-tab';\nexport const TAB_RADIO_KEY = 'data-diplodoc-input';\n\nexport enum TabsVariants {\n    Regular = 'regular',\n    Radio = 'radio',\n    Dropdown = 'dropdown',\n    Accordion = 'accordion',\n}\n\nexport type EnabledVariants = Partial<Record<TabsVariants, boolean>>;\n\nexport interface Tab {\n    group?: string;\n    key: string;\n    variant: TabsVariants;\n}\n\nexport interface SelectedTabEvent {\n    tab: Tab;\n    currentTabId?: string;\n}\n\nexport const GLOBAL_SYMBOL: unique symbol = Symbol.for('diplodocTabs');\n\ndeclare global {\n    interface Window {\n        [GLOBAL_SYMBOL]: TabsController;\n    }\n}\n", "export const getEventTarget = (event: Event) => {\n    const path = event.composedPath();\n    return Array.isArray(path) && path.length > 0 ? path[0] : event.target;\n};\n\nexport const isCustom = (event: Event) => {\n    const target = getEventTarget(event);\n    return !target || !(target as HTMLElement).matches;\n};\n\nexport const getClosestScrollableParent = (element: HTMLElement): HTMLElement | undefined => {\n    if (Math.abs(element.scrollHeight - element.clientHeight) > 1) {\n        return element;\n    }\n\n    return element.parentElement ? getClosestScrollableParent(element.parentElement) : undefined;\n};\n\nexport interface ElementOffset {\n    top: number;\n    left: number;\n    scrollTop: number;\n    scrollLeft: number;\n}\n\nexport const getOffsetByScrollableParent = (\n    element: HTMLElement,\n    scrollableParent: HTMLElement,\n): ElementOffset => {\n    const elementBounds = element.getBoundingClientRect();\n    const scrollableParentBounds = scrollableParent.getBoundingClientRect();\n    return {\n        top: elementBounds.top - scrollableParentBounds.top,\n        left: elementBounds.left - scrollableParentBounds.left,\n        scrollTop: scrollableParent.scrollTop,\n        scrollLeft: scrollableParent.scrollLeft,\n    };\n};\n", "import {\n    ACTIVE_CLASSNAME,\n    DEFAULT_TABS_GROUP_PREFIX,\n    GROUP_DATA_KEY,\n    SelectedTabEvent,\n    TABS_CLASSNAME,\n    TABS_DROPDOWN_SELECT,\n    TABS_LIST_CLASSNAME,\n    TABS_RADIO_CLASSNAME,\n    TAB_CLASSNAME,\n    TAB_DATA_ID,\n    TAB_DATA_KEY,\n    TAB_DATA_VARIANT,\n    TAB_FORCED_OPEN,\n    TAB_PANEL_CLASSNAME,\n    Tab,\n    TabsVariants,\n} from '../common';\n\nimport {\n    ElementOffset,\n    getClosestScrollableParent,\n    getEventTarget,\n    getOffsetByScrollableParent,\n    isCustom,\n} from './utils';\n\nconst Selector = {\n    TABS: `.${TABS_CLASSNAME}`,\n    TAB_LIST: `.${TABS_LIST_CLASSNAME}`,\n    TAB: `.${TAB_CLASSNAME}`,\n    TAB_PANEL: `.${TAB_PANEL_CLASSNAME}`,\n    VERTICAL_TABS: `.${TABS_RADIO_CLASSNAME}`,\n};\n\nexport interface ISelectTabByIdOptions {\n    scrollToElement: boolean;\n}\n\ntype Handler = (data: SelectedTabEvent) => void;\n\ntype TabSwitchDirection = 'left' | 'right';\n\nexport class TabsController {\n    private _document: Document;\n    private _onSelectTabHandlers: Set<Handler> = new Set();\n\n    // TODO: remove side effects from constructor\n    constructor(document: Document) {\n        this._document = document;\n\n        this._document.addEventListener('click', (event) => {\n            const target = getEventTarget(event) as HTMLElement;\n\n            if (event.target) {\n                this.hideAllDropdown(event.target as HTMLElement);\n            }\n\n            if (isCustom(event)) {\n                return;\n            }\n\n            if (this.isElementDropdownSelect(target)) {\n                target.classList.toggle(ACTIVE_CLASSNAME);\n\n                return;\n            }\n\n            if (!this.isValidTabElement(target)) {\n                return;\n            }\n\n            const tab = this.getTabDataFromHTMLElement(target);\n\n            if (tab) {\n                this._selectTab(tab, target);\n            }\n        });\n\n        this._document.addEventListener('keydown', (event) => {\n            let direction: TabSwitchDirection | null = null;\n            switch (event.key) {\n                case 'ArrowLeft': {\n                    direction = 'left';\n                    break;\n                }\n                case 'ArrowRight': {\n                    direction = 'right';\n                    break;\n                }\n                case 'ArrowUp': {\n                    direction = 'left';\n                    break;\n                }\n                case 'ArrowDown': {\n                    direction = 'right';\n                    break;\n                }\n            }\n            if (!direction) {\n                return;\n            }\n\n            const target = getEventTarget(event) as HTMLElement;\n\n            if (isCustom(event) || !this.isValidTabElement(target)) {\n                return;\n            }\n\n            const {tabs, nodes} = this.getTabs(target);\n            const currentTab = this.getTabDataFromHTMLElement(target);\n            const currentTabIndex = tabs.findIndex(\n                ({key}) => currentTab?.key && key === currentTab.key,\n            );\n            if (!currentTab || tabs.length <= 1 || currentTabIndex === -1) {\n                return;\n            }\n\n            const newIndex =\n                (currentTabIndex + (direction === 'left' ? -1 : 1) + tabs.length) % tabs.length;\n\n            this.selectTab(tabs[newIndex]);\n            nodes[newIndex].focus();\n        });\n    }\n\n    onSelectTab(handler: Handler) {\n        this._onSelectTabHandlers.add(handler);\n\n        return () => {\n            this._onSelectTabHandlers.delete(handler);\n        };\n    }\n\n    selectTabById(id: string, options?: ISelectTabByIdOptions) {\n        const target = this._document.querySelector(\n            `${Selector.TAB}[${TAB_DATA_ID}=\"${id}\"]`,\n        ) as HTMLElement;\n\n        if (!target || !this.isValidTabElement(target)) {\n            return;\n        }\n\n        const tab = this.getTabDataFromHTMLElement(target);\n\n        if (tab) {\n            this._selectTab(tab, target);\n        }\n\n        if (options?.scrollToElement) {\n            target.scrollIntoView();\n        }\n    }\n\n    selectTab(tab: Tab) {\n        this._selectTab(tab);\n    }\n\n    private _selectTab(tab: Tab, targetTab?: HTMLElement) {\n        const {group, key, variant} = tab;\n\n        if (!group) {\n            return;\n        }\n\n        const scrollableParent = targetTab && getClosestScrollableParent(targetTab);\n        const previousTargetOffset =\n            scrollableParent && getOffsetByScrollableParent(targetTab, scrollableParent);\n\n        const updatedTabs = this.updateHTML({group, key, variant}, targetTab, variant);\n\n        if (updatedTabs > 0) {\n            this.fireSelectTabEvent({group, key, variant}, targetTab?.dataset.diplodocId);\n\n            if (previousTargetOffset) {\n                this.resetScroll(targetTab, scrollableParent, previousTargetOffset);\n            }\n        }\n    }\n\n    private updateHTML(tab: Required<Tab>, target: HTMLElement | undefined, variant: TabsVariants) {\n        switch (variant) {\n            case TabsVariants.Radio: {\n                return this.updateHTMLRadio(tab, target);\n            }\n            case TabsVariants.Accordion: {\n                return this.updateHTMLAccordion(tab, target);\n            }\n            case TabsVariants.Regular: {\n                return this.updateHTMLRegular(tab);\n            }\n            case TabsVariants.Dropdown: {\n                return this.updateHTMLDropdown(tab);\n            }\n        }\n\n        return 0;\n    }\n\n    private updateHTMLRadio(tab: Required<Tab>, target: HTMLElement | undefined) {\n        const {group, key} = tab;\n\n        const {isForced, root} = this.didTabOpenForce(target);\n\n        const singleTabSelector = isForced ? `.yfm-vertical-tab[${TAB_FORCED_OPEN}=\"true\"]` : '';\n\n        const tabs = this._document.querySelectorAll(\n            `${Selector.TABS}[${GROUP_DATA_KEY}=\"${group}\"] ${Selector.TAB}[${TAB_DATA_KEY}=\"${key}\"]${singleTabSelector}`,\n        );\n\n        if (isForced) {\n            root?.removeAttribute(TAB_FORCED_OPEN);\n        }\n\n        let updated = 0;\n\n        tabs.forEach((tab) => {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const root = tab.parentNode!;\n            const elements = root.children;\n\n            for (let i = 0; i < elements.length; i += 2) {\n                const [title, content] = [elements.item(i), elements.item(i + 1)] as HTMLElement[];\n\n                const input = title.children.item(0) as HTMLInputElement;\n\n                if (title === tab) {\n                    const checked = input.checked;\n\n                    if (checked) {\n                        title.classList.remove('active');\n                        content?.classList.remove('active');\n\n                        input.removeAttribute('checked');\n                    } else {\n                        title.classList.add('active');\n                        content?.classList.add('active');\n\n                        input.setAttribute('checked', 'true');\n                    }\n\n                    continue;\n                }\n\n                if (input.hasAttribute('checked')) {\n                    title.classList.remove('active');\n                    content?.classList.remove('active');\n\n                    input.removeAttribute('checked');\n                }\n\n                updated++;\n            }\n        });\n\n        return updated;\n    }\n\n    private updateHTMLRegular(tab: Required<Tab>) {\n        const {group, key} = tab;\n\n        const tabs = this._document.querySelectorAll(\n            `${Selector.TABS}[${GROUP_DATA_KEY}=\"${group}\"] ${Selector.TAB}[${TAB_DATA_KEY}=\"${key}\"]`,\n        );\n\n        let updated = 0;\n\n        tabs.forEach((element) => {\n            const htmlElem = element as HTMLElement;\n            if (!this.isValidTabElement(htmlElem) || htmlElem.dataset.diplodocIsActive === 'true') {\n                return;\n            }\n\n            updated++;\n\n            const tab = element;\n            const tabList = tab.parentNode;\n            const tabsContainer = tabList?.parentNode;\n            const allTabs = Array.from(tabList?.querySelectorAll(Selector.TAB) || []);\n            const allPanels = Array.from(tabsContainer?.children || []).filter((node) =>\n                node.classList.contains(TAB_PANEL_CLASSNAME),\n            );\n            const targetIndex = allTabs.indexOf(tab);\n\n            allTabs.forEach((tab, i) => {\n                const panel = allPanels[i];\n                const isTargetTab = i === targetIndex;\n                const htmlElem = tab as HTMLElement;\n\n                htmlElem.dataset.diplodocIsActive = isTargetTab ? 'true' : 'false';\n\n                tab.classList.toggle(ACTIVE_CLASSNAME, isTargetTab);\n                tab.setAttribute('aria-selected', isTargetTab.toString());\n                tab.setAttribute('tabindex', isTargetTab ? '0' : '-1');\n                panel.classList.toggle(ACTIVE_CLASSNAME, isTargetTab);\n            });\n        });\n\n        return updated;\n    }\n\n    private updateHTMLDropdown(tab: Required<Tab>) {\n        const {group, key} = tab;\n\n        const tabs = this._document.querySelectorAll(\n            `${Selector.TABS}[${GROUP_DATA_KEY}=\"${group}\"] ${Selector.TAB}[${TAB_DATA_KEY}=\"${key}\"]`,\n        );\n\n        let changed = 0;\n\n        tabs.forEach((tab) => {\n            const dropdown = tab.closest(`[${TAB_DATA_VARIANT}=${TabsVariants.Dropdown}]`);\n\n            if (!dropdown?.children) {\n                return;\n            }\n\n            const select = dropdown.children.item(0) as HTMLElement;\n            const menu = dropdown.children.item(1);\n\n            select?.classList.remove(ACTIVE_CLASSNAME);\n\n            /* first and second elements are select / menu, skipping them */\n            const changedIndex = Array.from(menu?.children || []).indexOf(tab) + 2;\n\n            for (let i = 2; i < dropdown.children.length; i++) {\n                const item = dropdown.children.item(i) as HTMLElement;\n                const menuItem = menu?.children.item(i - 2) as HTMLElement;\n\n                changed++;\n\n                if (changedIndex === i) {\n                    item?.classList.add(ACTIVE_CLASSNAME);\n                    menuItem.classList.add(ACTIVE_CLASSNAME);\n\n                    select.innerHTML = tab.innerHTML;\n                    select.classList.add('filled');\n\n                    continue;\n                }\n\n                menuItem.classList.remove(ACTIVE_CLASSNAME);\n                item.classList.remove(ACTIVE_CLASSNAME);\n            }\n        });\n\n        return changed;\n    }\n\n    private updateHTMLAccordion(tab: Required<Tab>, target: HTMLElement | undefined) {\n        const {group, key} = tab;\n\n        const tabs = this._document.querySelectorAll(\n            `${Selector.TABS}[${GROUP_DATA_KEY}=\"${group}\"] ${Selector.TAB}[${TAB_DATA_KEY}=\"${key}\"]`,\n        );\n\n        let changed = 0;\n\n        tabs.forEach((tab) => {\n            const accordion = tab.closest(`[${TAB_DATA_VARIANT}=${TabsVariants.Accordion}]`);\n\n            if (!accordion?.children) {\n                return;\n            }\n\n            for (let i = 0; i < accordion.children.length; i += 2) {\n                const title = accordion.children.item(i);\n                const currentTab = accordion.children.item(i + 1);\n\n                changed++;\n\n                if (tab === title) {\n                    title?.classList.toggle(ACTIVE_CLASSNAME);\n                    currentTab?.classList.toggle(ACTIVE_CLASSNAME);\n\n                    continue;\n                }\n\n                title?.classList.remove(ACTIVE_CLASSNAME);\n                currentTab?.classList.remove(ACTIVE_CLASSNAME);\n            }\n        });\n\n        if (target && !this.checkVisible(target)) {\n            setTimeout(() => {\n                target.scrollIntoView({block: 'nearest'});\n            });\n        }\n\n        return changed;\n    }\n\n    private checkVisible(element: HTMLElement) {\n        const rect = element.getBoundingClientRect();\n        const viewHeight = Math.max(document.documentElement.clientHeight, window.innerHeight);\n\n        return !(rect.bottom < 0 || rect.top - viewHeight >= 0);\n    }\n\n    private hideAllDropdown(target: HTMLElement) {\n        const dropdowns = this._document.querySelectorAll('.yfm-tabs-dropdown-select.active');\n\n        dropdowns.forEach((menu) => {\n            if (!menu.contains(target)) {\n                menu.classList.remove(ACTIVE_CLASSNAME);\n            }\n        });\n    }\n\n    private resetScroll(\n        target: HTMLElement,\n        scrollableParent: HTMLElement,\n        previousTargetOffset: ElementOffset,\n    ) {\n        const targetOffset = getOffsetByScrollableParent(target, scrollableParent);\n        const topDelta = targetOffset.top - previousTargetOffset.top;\n        const leftDelta = targetOffset.left - previousTargetOffset.left;\n        const scrollTopDelta = targetOffset.scrollTop - previousTargetOffset.scrollTop;\n        const scrollLeftDelta = targetOffset.scrollLeft - previousTargetOffset.scrollLeft;\n        scrollableParent.scrollTo(\n            scrollableParent.scrollLeft + leftDelta - scrollLeftDelta,\n            scrollableParent.scrollTop + topDelta - scrollTopDelta,\n        );\n    }\n\n    private didTabOpenForce(target?: HTMLElement) {\n        if (!target) {\n            return {};\n        }\n\n        if (target.dataset.diplodocForced) {\n            return {root: target, isForced: true};\n        }\n\n        const root = target.dataset.diplodocVerticalTab ? target : target.parentElement;\n\n        const isForced = typeof root?.dataset.diplodocForced !== 'undefined';\n\n        return {root, isForced};\n    }\n\n    private fireSelectTabEvent(tab: Required<Tab>, diplodocId?: string) {\n        const {group, key, variant: align} = tab;\n\n        const eventTab: Tab = group.startsWith(DEFAULT_TABS_GROUP_PREFIX)\n            ? {key, variant: align}\n            : tab;\n\n        this._onSelectTabHandlers.forEach((handler) => {\n            handler({tab: eventTab, currentTabId: diplodocId});\n        });\n    }\n\n    private getTabsType(element: HTMLElement) {\n        const tabsRoot = element.closest(`[${TAB_DATA_VARIANT}]`) as HTMLElement | undefined;\n\n        if (!tabsRoot) {\n            return undefined;\n        }\n\n        return tabsRoot.dataset.diplodocVariant;\n    }\n\n    private isValidTabElement(element: HTMLElement) {\n        return Boolean(this.getTabsType(element));\n    }\n\n    private isElementDropdownSelect(target: HTMLElement) {\n        return target.classList.contains(TABS_DROPDOWN_SELECT);\n    }\n\n    private getTabDataFromHTMLElement(target: HTMLElement): Tab | null {\n        const type = this.getTabsType(target);\n\n        if (type === TabsVariants.Radio) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const tab = target.dataset.diplodocVerticalTab ? target : target.parentElement!;\n\n            const key = tab.dataset.diplodocKey;\n            const group = (tab.closest(Selector.TABS) as HTMLElement)?.dataset.diplodocGroup;\n            return key && group ? {group, key, variant: TabsVariants.Radio} : null;\n        }\n\n        if (type === TabsVariants.Dropdown || type === TabsVariants.Accordion) {\n            const key = target.dataset.diplodocKey;\n            const group = (target.closest(Selector.TABS) as HTMLElement)?.dataset.diplodocGroup;\n            return key && group ? {group, key, variant: type} : null;\n        }\n\n        const key = target.dataset.diplodocKey;\n        const group = (target.closest(Selector.TABS) as HTMLElement)?.dataset.diplodocGroup;\n        return key && group ? {group, key, variant: TabsVariants.Regular} : null;\n    }\n\n    private getTabs(target: HTMLElement): {tabs: Tab[]; nodes: NodeListOf<HTMLElement>} {\n        const group = (target.closest(Selector.TABS) as HTMLElement)?.dataset.diplodocGroup;\n        const nodes = (\n            target.closest(Selector.TAB_LIST) as HTMLElement\n        )?.querySelectorAll<HTMLElement>(Selector.TAB);\n\n        const tabs: Tab[] = [];\n        nodes.forEach((tabEl) => {\n            const key = tabEl?.dataset.diplodocKey;\n            if (!key) {\n                return;\n            }\n\n            /** horizontal-only supported feature (used in left/right button click) */\n            tabs.push({\n                group,\n                key,\n                variant: TabsVariants.Regular,\n            });\n        });\n\n        return {tabs, nodes};\n    }\n}\n", "import {GLOBAL_SYMBOL} from '../common';\n\nimport {TabsController} from './TabsController';\nimport './scss/tabs.scss';\n\nif (typeof window !== 'undefined' && typeof document !== 'undefined' && !window[GLOBAL_SYMBOL]) {\n    window[GLOBAL_SYMBOL] = new TabsController(document);\n}\n"],
  "mappings": "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",
  "names": ["TABS_CLASSNAME", "TAB_CLASSNAME", "TAB_PANEL_CLASSNAME", "TABS_LIST_CLASSNAME", "ACTIVE_CLASSNAME", "GROUP_DATA_KEY", "TAB_DATA_KEY", "TAB_DATA_VARIANT", "TAB_DATA_ID", "DEFAULT_TABS_GROUP_PREFIX", "TAB_FORCED_OPEN", "TABS_DROPDOWN_SELECT", "TABS_RADIO_CLASSNAME", "GLOBAL_SYMBOL", "getEventTarget", "event", "path", "isCustom", "target", "getClosestScrollableParent", "element", "getOffsetByScrollableParent", "scrollableParent", "elementBounds", "scrollableParentBounds", "Selector", "TABS_CLASSNAME", "TABS_LIST_CLASSNAME", "TAB_CLASSNAME", "TAB_PANEL_CLASSNAME", "TABS_RADIO_CLASSNAME", "TabsController", "document", "event", "target", "getEventTarget", "isCustom", "ACTIVE_CLASSNAME", "tab", "direction", "tabs", "nodes", "currentTab", "currentTabIndex", "key", "newIndex", "handler", "id", "options", "TAB_DATA_ID", "targetTab", "group", "variant", "scrollableParent", "getClosestScrollableParent", "previousTargetOffset", "getOffsetByScrollableParent", "isForced", "root", "singleTabSelector", "TAB_FORCED_OPEN", "GROUP_DATA_KEY", "TAB_DATA_KEY", "updated", "elements", "i", "title", "content", "input", "element", "htmlElem", "tabList", "tabsContainer", "allTabs", "allPanels", "node", "targetIndex", "panel", "isTargetTab", "changed", "dropdown", "TAB_DATA_VARIANT", "select", "menu", "changedIndex", "item", "menuItem", "accordion", "rect", "viewHeight", "targetOffset", "topDelta", "leftDelta", "scrollTopDelta", "scrollLeftDelta", "diplodocId", "align", "eventTab", "DEFAULT_TABS_GROUP_PREFIX", "tabsRoot", "TABS_DROPDOWN_SELECT", "_a", "_b", "_c", "type", "tabEl", "GLOBAL_SYMBOL", "TabsController"]
}
