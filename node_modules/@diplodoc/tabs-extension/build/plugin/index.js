"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/github-slugger/regex.js
var require_regex = __commonJS({
  "node_modules/github-slugger/regex.js"(exports2, module2) {
    "use strict";
    module2.exports = /[\0-\x1F!-,\.\/:-@\[-\^`\{-\xA9\xAB-\xB4\xB6-\xB9\xBB-\xBF\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0378\u0379\u037E\u0380-\u0385\u0387\u038B\u038D\u03A2\u03F6\u0482\u0530\u0557\u0558\u055A-\u055F\u0589-\u0590\u05BE\u05C0\u05C3\u05C6\u05C8-\u05CF\u05EB-\u05EE\u05F3-\u060F\u061B-\u061F\u066A-\u066D\u06D4\u06DD\u06DE\u06E9\u06FD\u06FE\u0700-\u070F\u074B\u074C\u07B2-\u07BF\u07F6-\u07F9\u07FB\u07FC\u07FE\u07FF\u082E-\u083F\u085C-\u085F\u086B-\u089F\u08B5\u08C8-\u08D2\u08E2\u0964\u0965\u0970\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09F2-\u09FB\u09FD\u09FF\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF0-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B54\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B70\u0B72-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BF0-\u0BFF\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C7F\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D0D\u0D11\u0D45\u0D49\u0D4F-\u0D53\u0D58-\u0D5E\u0D64\u0D65\u0D70-\u0D79\u0D80\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF4-\u0E00\u0E3B-\u0E3F\u0E4F\u0E5A-\u0E80\u0E83\u0E85\u0E8B\u0EA4\u0EA6\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F01-\u0F17\u0F1A-\u0F1F\u0F2A-\u0F34\u0F36\u0F38\u0F3A-\u0F3D\u0F48\u0F6D-\u0F70\u0F85\u0F98\u0FBD-\u0FC5\u0FC7-\u0FFF\u104A-\u104F\u109E\u109F\u10C6\u10C8-\u10CC\u10CE\u10CF\u10FB\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u1360-\u137F\u1390-\u139F\u13F6\u13F7\u13FE-\u1400\u166D\u166E\u1680\u169B-\u169F\u16EB-\u16ED\u16F9-\u16FF\u170D\u1715-\u171F\u1735-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17D4-\u17D6\u17D8-\u17DB\u17DE\u17DF\u17EA-\u180A\u180E\u180F\u181A-\u181F\u1879-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u1945\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DA-\u19FF\u1A1C-\u1A1F\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1AA6\u1AA8-\u1AAF\u1AC1-\u1AFF\u1B4C-\u1B4F\u1B5A-\u1B6A\u1B74-\u1B7F\u1BF4-\u1BFF\u1C38-\u1C3F\u1C4A-\u1C4C\u1C7E\u1C7F\u1C89-\u1C8F\u1CBB\u1CBC\u1CC0-\u1CCF\u1CD3\u1CFB-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FBD\u1FBF-\u1FC1\u1FC5\u1FCD-\u1FCF\u1FD4\u1FD5\u1FDC-\u1FDF\u1FED-\u1FF1\u1FF5\u1FFD-\u203E\u2041-\u2053\u2055-\u2070\u2072-\u207E\u2080-\u208F\u209D-\u20CF\u20F1-\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F-\u215F\u2189-\u24B5\u24EA-\u2BFF\u2C2F\u2C5F\u2CE5-\u2CEA\u2CF4-\u2CFF\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D70-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E00-\u2E2E\u2E30-\u3004\u3008-\u3020\u3030\u3036\u3037\u303D-\u3040\u3097\u3098\u309B\u309C\u30A0\u30FB\u3100-\u3104\u3130\u318F-\u319F\u31C0-\u31EF\u3200-\u33FF\u4DC0-\u4DFF\u9FFD-\u9FFF\uA48D-\uA4CF\uA4FE\uA4FF\uA60D-\uA60F\uA62C-\uA63F\uA673\uA67E\uA6F2-\uA716\uA720\uA721\uA789\uA78A\uA7C0\uA7C1\uA7CB-\uA7F4\uA828-\uA82B\uA82D-\uA83F\uA874-\uA87F\uA8C6-\uA8CF\uA8DA-\uA8DF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA954-\uA95F\uA97D-\uA97F\uA9C1-\uA9CE\uA9DA-\uA9DF\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A-\uAA5F\uAA77-\uAA79\uAAC3-\uAADA\uAADE\uAADF\uAAF0\uAAF1\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB5B\uAB6A-\uAB6F\uABEB\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uE000-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB29\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBB2-\uFBD2\uFD3E-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFC-\uFDFF\uFE10-\uFE1F\uFE30-\uFE32\uFE35-\uFE4C\uFE50-\uFE6F\uFE75\uFEFD-\uFF0F\uFF1A-\uFF20\uFF3B-\uFF3E\uFF40\uFF5B-\uFF65\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFFF]|\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDD3F\uDD75-\uDDFC\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEE1-\uDEFF\uDF20-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDF9F\uDFC4-\uDFC7\uDFD0\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56-\uDC5F\uDC77-\uDC7F\uDC9F-\uDCDF\uDCF3\uDCF6-\uDCFF\uDD16-\uDD1F\uDD3A-\uDD7F\uDDB8-\uDDBD\uDDC0-\uDDFF\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE36\uDE37\uDE3B-\uDE3E\uDE40-\uDE5F\uDE7D-\uDE7F\uDE9D-\uDEBF\uDEC8\uDEE7-\uDEFF\uDF36-\uDF3F\uDF56-\uDF5F\uDF73-\uDF7F\uDF92-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCFF\uDD28-\uDD2F\uDD3A-\uDE7F\uDEAA\uDEAD-\uDEAF\uDEB2-\uDEFF\uDF1D-\uDF26\uDF28-\uDF2F\uDF51-\uDFAF\uDFC5-\uDFDF\uDFF7-\uDFFF]|\uD804[\uDC47-\uDC65\uDC70-\uDC7E\uDCBB-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD40-\uDD43\uDD48-\uDD4F\uDD74\uDD75\uDD77-\uDD7F\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDFF\uDE12\uDE38-\uDE3D\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEA9-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC4B-\uDC4F\uDC5A-\uDC5D\uDC62-\uDC7F\uDCC6\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDC1-\uDDD7\uDDDE-\uDDFF\uDE41-\uDE43\uDE45-\uDE4F\uDE5A-\uDE7F\uDEB9-\uDEBF\uDECA-\uDEFF\uDF1B\uDF1C\uDF2C-\uDF2F\uDF3A-\uDFFF]|\uD806[\uDC3B-\uDC9F\uDCEA-\uDCFE\uDD07\uDD08\uDD0A\uDD0B\uDD14\uDD17\uDD36\uDD39\uDD3A\uDD44-\uDD4F\uDD5A-\uDD9F\uDDA8\uDDA9\uDDD8\uDDD9\uDDE2\uDDE5-\uDDFF\uDE3F-\uDE46\uDE48-\uDE4F\uDE9A-\uDE9C\uDE9E-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC41-\uDC4F\uDC5A-\uDC71\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDD5F\uDD66\uDD69\uDD8F\uDD92\uDD99-\uDD9F\uDDAA-\uDEDF\uDEF7-\uDFAF\uDFB1-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD824-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83D\uD83F\uD87B-\uD87D\uD87F\uD885-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDECF\uDEEE\uDEEF\uDEF5-\uDEFF\uDF37-\uDF3F\uDF44-\uDF4F\uDF5A-\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDE3F\uDE80-\uDEFF\uDF4B-\uDF4E\uDF88-\uDF8E\uDFA0-\uDFDF\uDFE2\uDFE5-\uDFEF\uDFF2-\uDFFF]|\uD821[\uDFF8-\uDFFF]|\uD823[\uDCD6-\uDCFF\uDD09-\uDFFF]|\uD82C[\uDD1F-\uDD4F\uDD53-\uDD63\uDD68-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A-\uDC9C\uDC9F-\uDFFF]|\uD834[\uDC00-\uDD64\uDD6A-\uDD6C\uDD73-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDE41\uDE45-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3\uDFCC\uDFCD]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDCFF\uDD2D-\uDD2F\uDD3E\uDD3F\uDD4A-\uDD4D\uDD4F-\uDEBF\uDEFA-\uDFFF]|\uD83A[\uDCC5-\uDCCF\uDCD7-\uDCFF\uDD4C-\uDD4F\uDD5A-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDFFF]|\uD83C[\uDC00-\uDD2F\uDD4A-\uDD4F\uDD6A-\uDD6F\uDD8A-\uDFFF]|\uD83E[\uDC00-\uDFEF\uDFFA-\uDFFF]|\uD869[\uDEDE-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uD884[\uDF4B-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]/g;
  }
});

// node_modules/github-slugger/index.js
var require_github_slugger = __commonJS({
  "node_modules/github-slugger/index.js"(exports2, module2) {
    "use strict";
    var regex = require_regex();
    module2.exports = BananaSlug;
    var own = Object.hasOwnProperty;
    function BananaSlug() {
      const self = this;
      if (!(self instanceof BananaSlug)) return new BananaSlug();
      self.reset();
    }
    BananaSlug.prototype.slug = function(value, maintainCase) {
      const self = this;
      let slug = slugger(value, maintainCase === true);
      const originalSlug = slug;
      while (own.call(self.occurrences, slug)) {
        self.occurrences[originalSlug]++;
        slug = originalSlug + "-" + self.occurrences[originalSlug];
      }
      self.occurrences[slug] = 0;
      return slug;
    };
    BananaSlug.prototype.reset = function() {
      this.occurrences = /* @__PURE__ */ Object.create(null);
    };
    function slugger(string, maintainCase) {
      if (typeof string !== "string") return "";
      if (!maintainCase) string = string.toLowerCase();
      return string.replace(regex, "").replace(/ /g, "-");
    }
    BananaSlug.slug = slugger;
  }
});

// src/plugin/index.ts
var plugin_exports = {};
__export(plugin_exports, {
  transform: () => transform
});
module.exports = __toCommonJS(plugin_exports);

// src/common.ts
var TAB_RE = /`?{% list tabs .*?%}`?/;
var TABS_CLASSNAME = "yfm-tabs";
var TAB_CLASSNAME = "yfm-tab";
var TAB_PANEL_CLASSNAME = "yfm-tab-panel";
var TABS_LIST_CLASSNAME = "yfm-tab-list";
var ACTIVE_CLASSNAME = "active";
var TAB_GROUP_CLASSNAME = "yfm-tab-group";
var TAB_ACTIVE_KEY = "data-diplodoc-is-active";
var GROUP_DATA_KEY = "data-diplodoc-group";
var TAB_DATA_KEY = "data-diplodoc-key";
var TAB_DATA_VARIANT = "data-diplodoc-variant";
var TAB_DATA_ID = "data-diplodoc-id";
var DEFAULT_TABS_GROUP_PREFIX = "defaultTabsGroup-";
var ACTIVE_TAB_TEXT = "{selected}";
var TAB_FORCED_OPEN = "data-diplodoc-forced";
var TABS_DROPDOWN_CLASSNAME = "yfm-tabs-dropdown";
var TABS_DROPDOWN_MENU_CLASSNAME = "yfm-tabs-dropdown-menu";
var TABS_DROPDOWN_SELECT = "yfm-tabs-dropdown-select";
var TABS_ACCORDION_CLASSNAME = "yfm-tabs-accordion";
var TABS_RADIO_CLASSNAME = "yfm-tabs-vertical";
var VERTICAL_TAB_CLASSNAME = "yfm-vertical-tab";
var TAB_DATA_VERTICAL_TAB = "data-diplodoc-vertical-tab";
var GLOBAL_SYMBOL = Symbol.for("diplodocTabs");

// src/plugin/utils/strings.ts
function generateID() {
  const id = Math.random().toString(36).substr(2, 8);
  return id.substring(id.length - 8);
}
function trim(target) {
  return target.trim();
}
function unquote(target) {
  return target.match(/^(["']).*\1$/) ? target.slice(1, -1) : target;
}

// src/plugin/utils/tabs.ts
var import_github_slugger = __toESM(require_github_slugger());
var CUSTOM_ID_REGEXP = /\[?{ ?#(\S+) ?}]?/;
var sluggersStorage = /* @__PURE__ */ new Map();
function parseName(name) {
  const parts = name.match(CUSTOM_ID_REGEXP);
  let customAnchor = null;
  let pure = name;
  if (parts) {
    pure = name.replace(parts[0], "");
    customAnchor = parts[1];
  } else {
    pure = name;
    customAnchor = null;
  }
  if (pure.includes(ACTIVE_TAB_TEXT)) {
    pure = pure.replace(ACTIVE_TAB_TEXT, "");
  }
  return {
    name: pure.trim(),
    customAnchor
  };
}
function getTabId(tab, { runId }) {
  let slugger = sluggersStorage.get(runId);
  if (!slugger) {
    slugger = new import_github_slugger.default();
    sluggersStorage.set(runId, slugger);
  }
  return slugger.slug(getRawId(tab));
}
function isTabSelected(tab) {
  const { name } = tab;
  return name.includes(ACTIVE_TAB_TEXT);
}
function getTabKey(tab) {
  return encodeURIComponent(getRawId(tab)).toLocaleLowerCase();
}
function getName(tab) {
  return parseName(tab.name).name;
}
function getRawId(tab) {
  const { customAnchor, name } = parseName(tab.name);
  return customAnchor || name;
}

// src/plugin/utils/files.ts
var PATH_TO_RUNTIME = "../runtime";
function copyRuntimeFiles({
  runtimeJsPath,
  runtimeCssPath,
  output
}, cache) {
  const { join, resolve } = dynrequire("node:path");
  const runtimeFiles = {
    "index.js": runtimeJsPath,
    "index.css": runtimeCssPath
  };
  for (const [originFile, outputFile] of Object.entries(runtimeFiles)) {
    const file = join(PATH_TO_RUNTIME, originFile);
    if (!cache.has(file)) {
      cache.add(file);
      copyFile(resolve(__dirname, file), join(output, outputFile));
    }
  }
}
function copyFile(from, to) {
  const { mkdirSync, copyFileSync } = dynrequire("node:fs");
  const { dirname } = dynrequire("node:path");
  mkdirSync(dirname(to), { recursive: true });
  copyFileSync(from, to);
}
function dynrequire(module) {
  return eval(`require('${module}')`);
}

// src/plugin/utils/index.ts
function addHiddenProperty(box, field, value) {
  if (!(field in box)) {
    Object.defineProperty(box, field, {
      enumerable: false,
      value
    });
  }
  return box;
}

// src/plugin/variants/regular.ts
var regular = (tabs, state, { containerClasses, tabsGroup, runId, variant: orientation }) => {
  var _a, _b;
  const tabsTokens = [];
  const tabListTokens = [];
  const tabPanelsTokens = [];
  const tabsOpen = new state.Token("tabs_open", "div", 1);
  const tabsClose = new state.Token("tabs_close", "div", -1);
  const tabListOpen = new state.Token("tab-list_open", "div", 1);
  const tabListClose = new state.Token("tab-list_close", "div", -1);
  if (tabs.length) {
    const [start] = (_a = tabs[0].listItem.map) != null ? _a : [null];
    if (start == null) {
      throw new Error("failed to parse line mapping");
    }
    const [_, end] = (_b = tabs[tabs.length - 1].listItem.map) != null ? _b : [null, null];
    if (end == null) {
      throw new Error("failed to parse line mapping");
    }
    tabListOpen.map = [start, end];
  }
  tabsOpen.block = true;
  tabsClose.block = true;
  tabListOpen.block = true;
  tabListClose.block = true;
  const activeTabsCount = tabs.filter(isTabSelected).length;
  if (activeTabsCount > 1) {
    throw new Error("Unable to render tabs with more than 1 active element");
  }
  const hasDefaultOpenTab = activeTabsCount !== 0;
  tabsOpen.attrSet("class", [TABS_CLASSNAME, containerClasses].filter(Boolean).join(" "));
  tabsOpen.attrSet(GROUP_DATA_KEY, tabsGroup);
  tabsOpen.attrSet(TAB_DATA_VARIANT, "regular");
  tabListOpen.attrSet("class", TABS_LIST_CLASSNAME);
  tabListOpen.attrSet("role", "tablist");
  if (orientation === "radio") {
    tabsTokens.push(tabsOpen);
  }
  for (let i = 0; i < tabs.length; i++) {
    const tabOpen = new state.Token("tab_open", "div", 1);
    const tabInline = new state.Token("inline", "", 0);
    const tabText = new state.Token("text", "", 0);
    const tabClose = new state.Token("tab_close", "div", -1);
    const tabPanelOpen = new state.Token("tab-panel_open", "div", 1);
    const tabPanelClose = new state.Token("tab-panel_close", "div", -1);
    const verticalTabInput = new state.Token("tab-input", "input", 0);
    const verticalTabLabelOpen = new state.Token("tab-label_open", "label", 1);
    const verticalTabLabelClose = new state.Token("tab-label_close", "label", -1);
    tabOpen.map = tabs[i].listItem.map;
    tabOpen.markup = tabs[i].listItem.markup;
    const tab = tabs[i];
    const tabId = getTabId(tab, { runId });
    const tabKey = getTabKey(tab);
    const didTabHasActiveAttr = isTabSelected(tab);
    const isTabActive = hasDefaultOpenTab ? didTabHasActiveAttr : i === 0;
    tab.name = getName(tab);
    const tabPanelId = generateID();
    verticalTabInput.block = true;
    verticalTabInput.attrJoin("class", "radio");
    verticalTabInput.attrSet("type", "radio");
    tabOpen.map = tabs[i].listItem.map;
    tabOpen.markup = tabs[i].listItem.markup;
    tabText.content = tabs[i].name;
    tabInline.children = [tabText];
    tabOpen.block = true;
    tabClose.block = true;
    tabPanelOpen.block = true;
    tabPanelClose.block = true;
    tabOpen.attrSet(TAB_DATA_ID, tabId);
    tabOpen.attrSet(TAB_DATA_KEY, tabKey);
    tabOpen.attrSet("class", TAB_CLASSNAME);
    tabOpen.attrJoin("class", "yfm-tab-group");
    tabOpen.attrSet("role", "tab");
    tabOpen.attrSet("aria-controls", tabPanelId);
    tabOpen.attrSet("aria-selected", "false");
    tabOpen.attrSet("tabindex", i === 0 ? "0" : "-1");
    tabOpen.attrSet(TAB_ACTIVE_KEY, "false");
    tabPanelOpen.attrSet("id", tabPanelId);
    tabPanelOpen.attrSet("class", TAB_PANEL_CLASSNAME);
    tabPanelOpen.attrSet("role", "tabpanel");
    tabPanelOpen.attrSet("aria-labelledby", tabId);
    tabPanelOpen.attrSet("data-title", tab.name);
    if (orientation === "radio") {
      tabOpen.attrSet(TAB_DATA_VERTICAL_TAB, "true");
      tabOpen.attrJoin("class", VERTICAL_TAB_CLASSNAME);
    }
    if (isTabActive) {
      if (orientation === "radio") {
        tabOpen.attrSet(TAB_FORCED_OPEN, "true");
        verticalTabInput.attrSet("checked", "true");
        tabPanelOpen.attrJoin("class", ACTIVE_CLASSNAME);
      } else {
        tabOpen.attrSet(TAB_ACTIVE_KEY, i === 0 ? "true" : "false");
        tabOpen.attrJoin("class", ACTIVE_CLASSNAME);
        tabOpen.attrSet("aria-selected", "true");
        tabPanelOpen.attrJoin("class", ACTIVE_CLASSNAME);
      }
    }
    if (orientation === "radio") {
      tabsTokens.push(
        tabOpen,
        verticalTabInput,
        verticalTabLabelOpen,
        tabInline,
        verticalTabLabelClose,
        tabClose
      );
      tabsTokens.push(tabPanelOpen, ...tabs[i].tokens, tabPanelClose);
    } else {
      tabListTokens.push(tabOpen, tabInline, tabClose);
      tabPanelsTokens.push(tabPanelOpen, ...tabs[i].tokens, tabPanelClose);
    }
  }
  tabsTokens.push(tabsOpen);
  tabsTokens.push(tabListOpen);
  tabsTokens.push(...tabListTokens);
  tabsTokens.push(tabListClose);
  tabsTokens.push(...tabPanelsTokens);
  tabsTokens.push(tabsClose);
  return tabsTokens;
};

// src/plugin/variants/radio.ts
var radio = (tabs, state, { containerClasses, tabsGroup, runId }) => {
  var _a, _b;
  const tabsTokens = [];
  const tabsOpen = new state.Token("tabs_open", "div", 1);
  const tabsClose = new state.Token("tabs_close", "div", -1);
  if (tabs.length) {
    const [start] = (_a = tabs[0].listItem.map) != null ? _a : [null];
    if (start == null) {
      throw new Error("failed to parse line mapping");
    }
    const [_, end] = (_b = tabs[tabs.length - 1].listItem.map) != null ? _b : [null, null];
    if (end == null) {
      throw new Error("failed to parse line mapping");
    }
  }
  tabsOpen.block = true;
  tabsClose.block = true;
  const activeTabsCount = tabs.filter(isTabSelected).length;
  if (activeTabsCount > 1) {
    throw new Error("Unable to render tabs with more than 1 active element");
  }
  tabsOpen.attrSet(
    "class",
    [TABS_CLASSNAME, containerClasses, TABS_RADIO_CLASSNAME].filter(Boolean).join(" ")
  );
  tabsOpen.attrSet(GROUP_DATA_KEY, tabsGroup);
  tabsOpen.attrSet(TAB_DATA_VARIANT, "radio");
  tabsTokens.push(tabsOpen);
  for (let i = 0; i < tabs.length; i++) {
    const tabOpen = new state.Token("tab_open", "div", 1);
    const tabInline = new state.Token("inline", "", 0);
    const tabText = new state.Token("text", "", 0);
    const tabClose = new state.Token("tab_close", "div", -1);
    const tabPanelOpen = new state.Token("tab-panel_open", "div", 1);
    const tabPanelClose = new state.Token("tab-panel_close", "div", -1);
    const verticalTabInput = new state.Token("tab-input", "input", 0);
    const verticalTabLabelOpen = new state.Token("tab-label_open", "label", 1);
    const verticalTabLabelClose = new state.Token("tab-label_close", "label", -1);
    tabOpen.map = tabs[i].listItem.map;
    tabOpen.markup = tabs[i].listItem.markup;
    const tab = tabs[i];
    const tabId = getTabId(tab, { runId });
    const tabKey = getTabKey(tab);
    const didTabHasActiveAttr = isTabSelected(tab);
    tab.name = getName(tab);
    const tabPanelId = generateID();
    verticalTabInput.block = true;
    verticalTabInput.attrJoin("class", "radio");
    verticalTabInput.attrSet("type", "radio");
    tabOpen.map = tabs[i].listItem.map;
    tabOpen.markup = tabs[i].listItem.markup;
    tabText.content = tabs[i].name;
    tabInline.children = [tabText];
    tabOpen.block = true;
    tabClose.block = true;
    tabPanelOpen.block = true;
    tabPanelClose.block = true;
    tabOpen.attrSet(TAB_DATA_ID, tabId);
    tabOpen.attrSet(TAB_DATA_KEY, tabKey);
    tabOpen.attrSet(
      "class",
      [TAB_CLASSNAME, TAB_GROUP_CLASSNAME, VERTICAL_TAB_CLASSNAME].join(" ")
    );
    tabOpen.attrSet("role", "tab");
    tabOpen.attrSet("aria-controls", tabPanelId);
    tabOpen.attrSet("aria-selected", "false");
    tabOpen.attrSet("tabindex", i === 0 ? "0" : "-1");
    tabOpen.attrSet(TAB_ACTIVE_KEY, "false");
    tabPanelOpen.attrSet("id", tabPanelId);
    tabPanelOpen.attrSet("class", TAB_PANEL_CLASSNAME);
    tabPanelOpen.attrSet("role", "tabpanel");
    tabPanelOpen.attrSet("aria-labelledby", tabId);
    tabPanelOpen.attrSet("data-title", tab.name);
    tabOpen.attrSet(TAB_DATA_VERTICAL_TAB, "true");
    if (didTabHasActiveAttr) {
      tabOpen.attrSet(TAB_FORCED_OPEN, "true");
      verticalTabInput.attrSet("checked", "true");
      tabPanelOpen.attrJoin("class", ACTIVE_CLASSNAME);
    }
    tabsTokens.push(
      tabOpen,
      verticalTabInput,
      verticalTabLabelOpen,
      tabInline,
      verticalTabLabelClose,
      tabClose
    );
    tabsTokens.push(tabPanelOpen, ...tabs[i].tokens, tabPanelClose);
  }
  tabsTokens.push(tabsClose);
  return tabsTokens;
};

// src/plugin/variants/dropdown.ts
var dropdown = (tabs, state, { containerClasses, tabsGroup, runId }) => {
  var _a, _b;
  const dropdownTokens = [];
  const dropdownOpen = new state.Token("dropdown_open", "div", 1);
  const dropdownClose = new state.Token("dropdown_close", "div", -1);
  const dropdownSelectOpen = new state.Token("dropdown-select_open", "div", 1);
  const dropdownSelectInline = new state.Token("inline", "", 0);
  const dropdownSelectText = new state.Token("text", "", 0);
  const dropdownSelectClose = new state.Token("dropdown-select_open", "div", -1);
  if (tabs.length) {
    const [start] = (_a = tabs[0].listItem.map) != null ? _a : [null];
    if (start == null) {
      throw new Error("failed to parse line mapping");
    }
    const [_, end] = (_b = tabs[tabs.length - 1].listItem.map) != null ? _b : [null, null];
    if (end == null) {
      throw new Error("failed to parse line mapping");
    }
  }
  dropdownOpen.block = true;
  dropdownClose.block = true;
  dropdownSelectOpen.block = true;
  dropdownSelectClose.block = true;
  const [activeTab, ...restActiveTabs] = tabs.filter(isTabSelected);
  if (restActiveTabs.length) {
    throw new Error("Unable to dropdown tabs with more than 1 active element");
  }
  dropdownOpen.attrSet(
    "class",
    [TABS_CLASSNAME, containerClasses, TABS_DROPDOWN_CLASSNAME].filter(Boolean).join(" ")
  );
  dropdownOpen.attrSet(GROUP_DATA_KEY, tabsGroup);
  dropdownOpen.attrSet(TAB_DATA_VARIANT, "dropdown");
  dropdownSelectOpen.attrSet("role", "tablist");
  dropdownSelectOpen.attrSet("class", TABS_DROPDOWN_SELECT);
  if (activeTab) {
    dropdownSelectOpen.attrJoin("class", "filled");
  }
  dropdownSelectText.content = activeTab ? activeTab.name : "-";
  dropdownSelectInline.children = [dropdownSelectText];
  dropdownTokens.push(
    dropdownOpen,
    dropdownSelectOpen,
    dropdownSelectInline,
    dropdownSelectClose
  );
  const dropdownMenuOpen = new state.Token("dropdown-menu_open", "ul", 1);
  const dropdownMenuClose = new state.Token("dropdown-menu_close", "ul", -1);
  dropdownMenuOpen.attrSet("class", TABS_DROPDOWN_MENU_CLASSNAME);
  const menuTokens = tabs.flatMap((tab) => {
    const menuListItemOpen = new state.Token("dropdown-menu-item_open", "li", 1);
    const menuListItemClose = new state.Token("dropdown-menu-item_close", "li", -1);
    const menuListItemText = new state.Token("text", "", 0);
    const menuListItemInline = new state.Token("inline", "", 0);
    const tabId = getTabId(tab, { runId });
    const tabKey = getTabKey(tab);
    const isActive = tab === activeTab;
    menuListItemOpen.attrSet(
      "class",
      [TAB_CLASSNAME, isActive && ACTIVE_CLASSNAME].filter(Boolean).join(" ")
    );
    menuListItemOpen.attrSet(TAB_DATA_ID, tabId);
    menuListItemOpen.attrSet(TAB_DATA_KEY, tabKey);
    menuListItemOpen.attrSet("aria-selected", String(isActive));
    menuListItemText.content = tab.name;
    menuListItemInline.children = [menuListItemText];
    return [menuListItemOpen, menuListItemInline, menuListItemClose];
  });
  dropdownTokens.push(dropdownMenuOpen, ...menuTokens, dropdownMenuClose);
  for (let i = 0; i < tabs.length; i++) {
    const tabPanelOpen = new state.Token("tab-panel_open", "div", 1);
    const tabPanelClose = new state.Token("tab-panel_close", "div", -1);
    const tab = tabs[i];
    const tabId = getTabId(tab, { runId });
    const didTabHasActiveAttr = isTabSelected(tab);
    tab.name = getName(tab);
    const tabPanelId = generateID();
    tabPanelOpen.block = true;
    tabPanelClose.block = true;
    tabPanelOpen.attrSet("id", tabPanelId);
    tabPanelOpen.attrSet("class", TAB_PANEL_CLASSNAME);
    tabPanelOpen.attrSet("role", "tabpanel");
    tabPanelOpen.attrSet("aria-labelledby", tabId);
    tabPanelOpen.attrSet("data-title", tab.name);
    if (didTabHasActiveAttr) {
      tabPanelOpen.attrJoin("class", ACTIVE_CLASSNAME);
    }
    dropdownTokens.push(tabPanelOpen, ...tabs[i].tokens, tabPanelClose);
  }
  dropdownTokens.push(dropdownClose);
  return dropdownTokens;
};

// src/plugin/variants/accordion.ts
var accordion = (tabs, state, { containerClasses, tabsGroup, runId }) => {
  var _a, _b;
  const tabsTokens = [];
  const tabsOpen = new state.Token("tabs_open", "div", 1);
  const tabsClose = new state.Token("tabs_close", "div", -1);
  if (tabs.length) {
    const [start] = (_a = tabs[0].listItem.map) != null ? _a : [null];
    if (start == null) {
      throw new Error("failed to parse line mapping");
    }
    const [_, end] = (_b = tabs[tabs.length - 1].listItem.map) != null ? _b : [null, null];
    if (end == null) {
      throw new Error("failed to parse line mapping");
    }
  }
  tabsOpen.block = true;
  tabsClose.block = true;
  const activeTabsCount = tabs.filter(isTabSelected).length;
  if (activeTabsCount > 1) {
    throw new Error("Unable to render tabs with more than 1 active element");
  }
  tabsOpen.attrSet(
    "class",
    [TABS_CLASSNAME, containerClasses, TABS_ACCORDION_CLASSNAME].filter(Boolean).join(" ")
  );
  tabsOpen.attrSet(GROUP_DATA_KEY, tabsGroup);
  tabsOpen.attrSet(TAB_DATA_VARIANT, "accordion" /* Accordion */);
  tabsTokens.push(tabsOpen);
  for (let i = 0; i < tabs.length; i++) {
    const tabOpen = new state.Token("tab_open", "div", 1);
    const tabInline = new state.Token("inline", "", 0);
    const tabText = new state.Token("text", "", 0);
    const tabClose = new state.Token("tab_close", "div", -1);
    const tabPanelOpen = new state.Token("tab-panel_open", "div", 1);
    const tabPanelClose = new state.Token("tab-panel_close", "div", -1);
    tabOpen.map = tabs[i].listItem.map;
    tabOpen.markup = tabs[i].listItem.markup;
    const tab = tabs[i];
    const tabId = getTabId(tab, { runId });
    const tabKey = getTabKey(tab);
    const didTabHasActiveAttr = isTabSelected(tab);
    tab.name = getName(tab);
    const tabPanelId = generateID();
    tabOpen.map = tabs[i].listItem.map;
    tabOpen.markup = tabs[i].listItem.markup;
    tabText.content = tabs[i].name;
    tabInline.children = [tabText];
    tabOpen.block = true;
    tabClose.block = true;
    tabPanelOpen.block = true;
    tabPanelClose.block = true;
    tabOpen.attrSet(TAB_DATA_ID, tabId);
    tabOpen.attrSet(TAB_DATA_KEY, tabKey);
    tabOpen.attrSet("class", [TAB_CLASSNAME, TAB_GROUP_CLASSNAME].join(" "));
    tabOpen.attrSet("role", "tab");
    tabOpen.attrSet("aria-controls", tabPanelId);
    tabOpen.attrSet("aria-selected", "false");
    tabOpen.attrSet("tabindex", i === 0 ? "0" : "-1");
    tabOpen.attrSet(TAB_ACTIVE_KEY, "false");
    tabPanelOpen.attrSet("id", tabPanelId);
    tabPanelOpen.attrSet("class", TAB_PANEL_CLASSNAME);
    tabPanelOpen.attrSet("role", "tabpanel");
    tabPanelOpen.attrSet("aria-labelledby", tabId);
    tabPanelOpen.attrSet("data-title", tab.name);
    if (didTabHasActiveAttr) {
      tabPanelOpen.attrSet(TAB_FORCED_OPEN, "true");
      tabPanelOpen.attrJoin("class", ACTIVE_CLASSNAME);
      tabOpen.attrJoin("class", ACTIVE_CLASSNAME);
    }
    tabsTokens.push(tabOpen, tabInline, tabClose);
    tabsTokens.push(tabPanelOpen, ...tabs[i].tokens, tabPanelClose);
  }
  tabsTokens.push(tabsClose);
  return tabsTokens;
};

// src/plugin/variants/index.ts
var generateByType = {
  regular,
  radio,
  dropdown,
  accordion
};
var generateTokensByType = (type) => {
  return generateByType[type];
};

// src/plugin/generate.ts
function generateTabsTokens(tabs, state, props2) {
  const tokens = generateTokensByType(props2.variant)(tabs, state, props2);
  return tokens;
}

// src/plugin/find.ts
var import_token = __toESM(require("markdown-it/lib/token"));
function findCloseTokenIndex(tokens, idx) {
  let level = 0;
  let i = idx;
  while (i < tokens.length) {
    if (matchOpenToken(tokens, i)) {
      level++;
    } else if (matchCloseToken(tokens, i)) {
      if (level === 0) {
        return i;
      }
      level--;
    }
    i++;
  }
  return null;
}
function matchCloseToken(tokens, i) {
  return tokens[i].type === "paragraph_open" && tokens[i + 1].type === "inline" && tokens[i + 1].content.trim() === "{% endlist %}";
}
function matchOpenToken(tokens, i) {
  return tokens[i].type === "paragraph_open" && tokens[i + 1].type === "inline" && tokens[i + 1].content.match(TAB_RE);
}
function props(content) {
  const clean = trim(content.replace("list tabs", ""));
  const props2 = clean.split(" ");
  const result = {
    content: clean,
    variant: "regular" /* Regular */,
    group: `${DEFAULT_TABS_GROUP_PREFIX}${generateID()}`
  };
  for (const prop of props2) {
    const [key, value] = prop.split("=").map(trim);
    switch (key) {
      case "horizontal":
      case "radio":
      case "dropdown":
      case "accordion":
        result.variant = key;
        break;
      case "group":
        result.group = unquote(value);
        break;
      default:
    }
  }
  return result;
}
function tryToFindTabs(tokens, index) {
  const match = matchOpenToken(tokens, index);
  const openTag = match && match[0];
  const isNotEscaped = openTag && !(openTag.startsWith("`") && openTag.endsWith("`"));
  if (!match || !isNotEscaped) {
    return {
      step: 1
    };
  }
  const closeTokenIndex = findCloseTokenIndex(tokens, index + 3);
  if (!closeTokenIndex) {
    tokens[index].attrSet("YFM005", "true");
    return {
      step: 3
    };
  }
  return {
    content: openTag,
    closeTokenIndex
  };
}
function findTabs(tokens, idx, closeTokenIdx) {
  const tabs = [];
  let i = idx;
  let nestedLevel = -1;
  let pending = {
    name: "",
    tokens: [],
    listItem: new import_token.default("list_item_open", "", 0)
  };
  while (i < tokens.length) {
    const token = tokens[i];
    switch (token.type) {
      case "ordered_list_open":
      case "bullet_list_open":
        if (nestedLevel > -1) {
          pending.tokens.push(token);
        }
        nestedLevel++;
        break;
      case "list_item_open":
        if (nestedLevel) {
          pending.tokens.push(token);
        } else {
          pending = { name: "", tokens: [], listItem: token };
        }
        break;
      case "list_item_close":
        if (nestedLevel) {
          pending.tokens.push(token);
        } else {
          tabs.push(pending);
        }
        break;
      case "ordered_list_close":
      case "bullet_list_close":
        if (!nestedLevel) {
          return tabs;
        }
        nestedLevel--;
        pending.tokens.push(token);
        break;
      case "paragraph_open":
        if (i === closeTokenIdx && tokens[i + 1].content && tokens[i + 1].content.trim() === "{% endlist %}") {
          if (pending && !nestedLevel) {
            tabs.push(pending);
          }
          return tabs;
        }
        if (!pending.name && tokens[i + 1].type === "inline") {
          pending.name = tokens[i + 1].content;
          i += 2;
        } else {
          pending.tokens.push(token);
        }
        break;
      default:
        pending.tokens.push(token);
    }
    i++;
  }
  return tabs;
}

// src/plugin/transform.ts
var defaultFeatures = {
  enabledVariants: {
    regular: true,
    radio: true
  }
};
var runsCounter = 0;
function transform({
  runtimeJsPath = "_assets/tabs-extension.js",
  runtimeCssPath = "_assets/tabs-extension.css",
  containerClasses = "",
  bundle = true,
  features = defaultFeatures
} = {}) {
  return function tabs(md, options) {
    const { output = "." } = options || {};
    const plugin = (state) => {
      const { env, tokens } = state;
      const runId = String(++runsCounter);
      addHiddenProperty(env, "bundled", /* @__PURE__ */ new Set());
      let i = 0;
      let tabsAreInserted = false;
      while (i < tokens.length) {
        const result = tryToFindTabs(tokens, i);
        if ("step" in result) {
          i += result.step;
          continue;
        }
        const { content, closeTokenIndex } = result;
        const parsedProps = props(content);
        if (!features.enabledVariants[parsedProps.variant]) {
          parsedProps.variant = "regular" /* Regular */;
        }
        const tabs2 = findTabs(state.tokens, i + 3, closeTokenIndex);
        if (tabs2.length > 0) {
          const tabsTokens = generateTabsTokens(tabs2, state, {
            containerClasses,
            tabsGroup: parsedProps.group,
            variant: parsedProps.variant,
            runId
          });
          state.tokens.splice(i, closeTokenIndex - i + 3, ...tabsTokens);
          i++;
          tabsAreInserted = true;
        } else {
          state.tokens.splice(i, closeTokenIndex - i + 3);
        }
      }
      if (tabsAreInserted) {
        env.meta = env.meta || {};
        env.meta.script = env.meta.script || [];
        env.meta.style = env.meta.style || [];
        env.meta.script.push(runtimeJsPath);
        env.meta.style.push(runtimeCssPath);
        if (bundle) {
          copyRuntimeFiles({ runtimeJsPath, runtimeCssPath, output }, env.bundled);
        }
      }
    };
    try {
      md.core.ruler.before("curly_attributes", "tabs", plugin);
    } catch (e) {
      md.core.ruler.push("tabs", plugin);
    }
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  transform
});
//# sourceMappingURL=index.js.map
