"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/get-root-node-polyfill/index.js
  var require_get_root_node_polyfill = __commonJS({
    "node_modules/get-root-node-polyfill/index.js"(exports, module) {
      "use strict";
      function getRootNode2(opt) {
        var composed = typeof opt === "object" && Boolean(opt.composed);
        return composed ? getShadowIncludingRoot(this) : getRoot(this);
      }
      function getShadowIncludingRoot(node) {
        var root = getRoot(node);
        if (isShadowRoot(root)) {
          return getShadowIncludingRoot(root.host);
        }
        return root;
      }
      function getRoot(node) {
        if (node.parentNode != null) {
          return getRoot(node.parentNode);
        }
        return node;
      }
      function isShadowRoot(node) {
        return node.nodeName === "#document-fragment" && node.constructor.name === "ShadowRoot";
      }
      if (typeof module === "object" && module.exports) {
        module.exports = getRootNode2;
      }
    }
  });

  // src/js/polyfill.js
  var import_get_root_node_polyfill = __toESM(require_get_root_node_polyfill());
  if (typeof document !== "undefined") {
    (function(e) {
      const matches = e.matches || e.matchesSelector || e.webkitMatchesSelector || e.mozMatchesSelector || e.msMatchesSelector || e.oMatchesSelector;
      if (matches) {
        e.matches = e.matchesSelector = matches;
      } else {
        e.matches = e.matchesSelector = function matches2(selector) {
          const rootNode = e.getRootNode ? e.getRootNode() : import_get_root_node_polyfill.default.call(e);
          const matches3 = rootNode.querySelectorAll(selector);
          const th = this;
          return Array.prototype.some.call(matches3, (e2) => {
            return e2 === th;
          });
        };
      }
    })(Element.prototype);
  }

  // src/js/utils.ts
  var getEventTarget = (event) => {
    const path = event.composedPath();
    return Array.isArray(path) && path.length > 0 ? path[0] : event.target;
  };
  var isCustom = (event) => {
    const target = getEventTarget(event);
    return !target || !target.matches;
  };

  // src/js/code.ts
  var BUTTON_SELECTOR = ".yfm-clipboard-button";
  function copyToClipboard(text) {
    if (!text) {
      return Promise.resolve();
    }
    if (navigator.clipboard && typeof navigator.clipboard.writeText) {
      return navigator.clipboard.writeText(text);
    }
    const textarea = document.createElement("textarea");
    textarea.setAttribute("style", "position: absolute; left: 1000%");
    textarea.textContent = text;
    document.body.append(textarea);
    textarea.select();
    document.execCommand("copy");
    document.body.removeChild(textarea);
    return Promise.resolve();
  }
  function notifySuccess(svgButton) {
    if (!svgButton) {
      return;
    }
    const id = svgButton.getAttribute("data-animation");
    const icon = svgButton.getRootNode().getElementById(`visibileAnimation-${id}`);
    if (!icon) {
      return;
    }
    icon.beginElement();
  }
  if (typeof document !== "undefined") {
    document.addEventListener("click", (event) => {
      const target = getEventTarget(event);
      if (isCustom(event) || !target.matches(BUTTON_SELECTOR)) {
        return;
      }
      const parent = target.parentNode;
      if (!parent) {
        return;
      }
      const code = parent.querySelector("pre code");
      if (!code) {
        return;
      }
      copyToClipboard(code.innerText).then(() => {
        notifySuccess(parent.querySelector(".yfm-clipboard-icon"));
      });
    });
  }
})();
//# sourceMappingURL=base.js.map
