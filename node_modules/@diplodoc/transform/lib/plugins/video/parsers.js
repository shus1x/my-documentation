"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseVideoUrl = exports.vkParser = exports.yandexParser = exports.mfrParser = exports.preziParser = exports.vineParser = exports.vimeoParser = exports.youtubeParser = void 0;
const const_1 = require("./const");
const ytRegex = /^.*((youtu.be\/)|(v\/)|(\/u\/\w\/)|(embed\/)|(watch\?))\??v?=?([^#&?]*).*/;
function youtubeParser(url) {
    const match = url.match(ytRegex);
    return match && match[7].length === 11 ? match[7] : url;
}
exports.youtubeParser = youtubeParser;
const vimeoRegex = /https?:\/\/(?:www\.|player\.)?vimeo.com\/(?:channels\/(?:\w+\/)?|groups\/([^/]*)\/videos\/|album\/(\d+)\/video\/|)(\d+)(?:$|\/|\?)/;
function vimeoParser(url) {
    const match = url.match(vimeoRegex);
    return match && typeof match[3] === 'string' ? match[3] : url;
}
exports.vimeoParser = vimeoParser;
const vineRegex = /^http(?:s?):\/\/(?:www\.)?vine\.co\/v\/([a-zA-Z0-9]{1,13}).*/;
function vineParser(url) {
    const match = url.match(vineRegex);
    return match && match[1].length === 11 ? match[1] : url;
}
exports.vineParser = vineParser;
const preziRegex = /^https:\/\/prezi.com\/(.[^/]+)/;
function preziParser(url) {
    const match = url.match(preziRegex);
    return match ? match[1] : url;
}
exports.preziParser = preziParser;
// TODO: Write regex for staging and local servers.
const mfrRegex = /^http(?:s?):\/\/(?:www\.)?mfr\.osf\.io\/render\?url=http(?:s?):\/\/osf\.io\/([a-zA-Z0-9]{1,5})\/\?action=download/;
function mfrParser(url) {
    const match = url.match(mfrRegex);
    return match ? match[1] : url;
}
exports.mfrParser = mfrParser;
const yandexRegex = /^https:\/\/runtime.video.cloud.yandex.net\/player\/video\/([a-zA-Z0-9]+)/;
function yandexParser(url) {
    const match = url.match(yandexRegex);
    return match ? match[1] : url;
}
exports.yandexParser = yandexParser;
const vkRegex = /^https:\/\/vk.com\/video_ext\.php?(oid=[-\d]+&id=[-\d]+)/;
function vkParser(url) {
    const match = url.match(vkRegex);
    return match ? match[1] : url;
}
exports.vkParser = vkParser;
function parseVideoUrl(service, url) {
    let videoID = '';
    switch (service.toLowerCase()) {
        case const_1.VideoService.YouTube:
            videoID = youtubeParser(url);
            break;
        case const_1.VideoService.Vimeo:
            videoID = vimeoParser(url);
            break;
        case const_1.VideoService.Vine:
            videoID = vineParser(url);
            break;
        case const_1.VideoService.Prezi:
            videoID = preziParser(url);
            break;
        case const_1.VideoService.Osf:
            videoID = mfrParser(url);
            break;
        case const_1.VideoService.Yandex:
            videoID = yandexParser(url);
            break;
        case const_1.VideoService.Vk:
            videoID = vkParser(url);
            break;
        default:
            return false;
    }
    // If the videoID field is empty, regex currently make it the close parenthesis.
    if (videoID === ')') {
        videoID = '';
    }
    return videoID;
}
exports.parseVideoUrl = parseVideoUrl;
//# sourceMappingURL=parsers.js.map