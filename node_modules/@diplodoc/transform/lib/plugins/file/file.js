"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileParser = exports.fileRenderer = void 0;
const const_1 = require("./const");
const fileRenderer = (md) => {
    const iconHtml = `<span class="${md.utils.escapeHtml(const_1.FileClassName.Icon)}"></span>`;
    return (tokens, idx, _opts, _env, self) => {
        const token = tokens[idx];
        return `<a${self.renderAttrs(token)}>${iconHtml}${md.utils.escapeHtml(token.content)}</a>`;
    };
};
exports.fileRenderer = fileRenderer;
const fileParser = (_md, opts) => {
    return (state, silent) => {
        if (state.src.substring(state.pos, state.pos + const_1.PREFIX_LENGTH) !== const_1.PREFIX)
            return false;
        // the rest of line after '{% file '
        const searchStr = state.src.slice(state.pos + const_1.PREFIX_LENGTH, state.posMax);
        // loking for pattern 'src="..." name="..." etc="value" %}'
        const matchResult = searchStr.match(/^((?:\s*\w+=(?:"[^"]+"|'[^']+')\s)+)\s*%}/);
        if (!matchResult)
            return false;
        const paramsGroupLength = matchResult[0].length; // '(src="..." name="...")'.length
        const paramsStr = matchResult[1]; // 'src="..." name="..."'
        // find pairs of key="foo" or key='bar'
        const params = paramsStr.match(/\w+=(?:"[^"]+"|'[^']+')/g);
        if (!params)
            return false;
        const attrsObj = {};
        params.forEach((param) => {
            const indexKey = param.indexOf('=');
            const key = param.slice(0, indexKey);
            const value = param.slice(indexKey + 2, -1);
            if (const_1.KNOWN_ATTRS.includes(key) && value) {
                attrsObj[key] = value;
            }
        });
        const hasAllRequiredAttrs = const_1.REQUIRED_ATTRS.every((attr) => attr in attrsObj);
        if (!hasAllRequiredAttrs)
            return false;
        if (!silent) {
            const token = state.push(const_1.FILE_TOKEN, '', 0);
            token.block = false;
            token.markup = const_1.PREFIX;
            token.content = attrsObj[const_1.FileSpecialAttr.Name];
            token.attrs = Object.entries(attrsObj);
            token.attrSet('class', const_1.FileClassName.Link);
            for (const attr of token.attrs) {
                if (attr[0] in const_1.FILE_TO_LINK_ATTRS_MAP) {
                    attr[0] = const_1.FILE_TO_LINK_ATTRS_MAP[attr[0]];
                }
            }
            if (Array.isArray(opts === null || opts === void 0 ? void 0 : opts.fileExtraAttrs)) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                token.attrs.push(...opts.fileExtraAttrs);
            }
        }
        state.pos = state.pos + const_1.PREFIX_LENGTH + paramsGroupLength;
        return true;
    };
};
exports.fileParser = fileParser;
//# sourceMappingURL=file.js.map