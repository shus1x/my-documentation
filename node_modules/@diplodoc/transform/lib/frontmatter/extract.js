"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.separateAndExtractFrontMatter = void 0;
const js_yaml_1 = require("js-yaml");
const log_1 = require("../log");
const common_1 = require("./common");
const transformValues_1 = require("./transformValues");
const matchMetadata = (fileContent) => {
    if (!fileContent.startsWith(common_1.frontMatterFence)) {
        return null;
    }
    // Search by format:
    // ---
    // metaName1: metaValue1
    // metaName2: meta value2
    // incorrectMetadata
    // ---
    const regexpMetadata = '(?<=-{3}\\r?\\n)((.*\\r?\\n)*?)(?=-{3}\\r?\\n)';
    // Search by format:
    // ---
    // main content 123
    const regexpFileContent = '-{3}\\r?\\n((.*[\r?\n]*)*)';
    const regexpParseFileContent = new RegExp(`${regexpMetadata}${regexpFileContent}`, 'gm');
    return regexpParseFileContent.exec(fileContent);
};
const duplicateKeysCompatibleLoad = (yaml, filePath) => {
    try {
        return (0, js_yaml_1.load)(yaml);
    }
    catch (e) {
        if (e instanceof js_yaml_1.YAMLException) {
            const duplicateKeysDeprecationWarning = `
                In ${filePath !== null && filePath !== void 0 ? filePath : '(unknown)'}: Encountered a YAML parsing exception when processing file metadata: ${e.reason}.
                It's highly possible the input file contains duplicate mapping keys.
                Will retry processing with necessary compatibility flags.
                Please note that this behaviour is DEPRECATED and WILL be removed in a future version
                without further notice, so the build WILL fail when supplied with YAML-incompatible meta.
            `
                .replace(/^\s+/gm, '')
                .replace(/\n/g, ' ')
                .trim();
            log_1.log.warn(duplicateKeysDeprecationWarning);
            return (0, js_yaml_1.load)(yaml, { json: true });
        }
        throw e;
    }
};
const separateAndExtractFrontMatter = (fileContent, filePath) => {
    const matches = matchMetadata(fileContent);
    if (matches && matches.length > 0) {
        const [, metadata, , metadataStrippedContent] = matches;
        return {
            frontMatter: (0, transformValues_1.transformFrontMatterValues)(duplicateKeysCompatibleLoad((0, common_1.escapeLiquidSubstitutionSyntax)(metadata), filePath), (v) => (typeof v === 'string' ? (0, common_1.unescapeLiquidSubstitutionSyntax)(v) : v)),
            frontMatterStrippedContent: metadataStrippedContent,
            frontMatterLineCount: (0, common_1.countLineAmount)(metadata),
        };
    }
    return {
        frontMatter: {},
        frontMatterStrippedContent: fileContent,
        frontMatterLineCount: 0,
    };
};
exports.separateAndExtractFrontMatter = separateAndExtractFrontMatter;
//# sourceMappingURL=extract.js.map